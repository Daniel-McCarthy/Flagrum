@using Flagrum.Core.Utilities.Types
@using Flagrum.Core.Utilities
@using System.IO
@using System.Diagnostics
@inject IWpfService WpfService
@inject IStringLocalizer<MainMenu> L
@inject IStringLocalizer<App> AppLocalizer
@inject FlagrumDbContext Context
@inject ProfileService Profile

<CascadingValue Value="this">
    <Bootstrapper/>
    <div class="h-full bg-dark flex flex-col border-dark-550 border-r" style="flex: 0 0 195px">
        <MenuItem Icon="apps" Text="@L["ModManager"]" DefaultActive="true" Uri="/"/>
        <MenuItem Icon="videogame_asset" Text="@L["AssetExplorer"]" Uri="/assets"/>

        @if (Profile.Current.Type == LuminousGame.FFXV)
        {
            <MenuItem Icon="steam" Text=@L["WorkshopMods"] Uri="/mod"/>
        }

        <div class="flex-grow"></div>

        <MenuItem Icon="menu_book" Text="@L["Wiki"]" Uri="@L["WikiUrl"]"/>
        <MenuItem Icon="info" Text="@L["About"]" Uri="/about"/>
        <MenuItem Icon="settings" Text="@AppLocalizer["Settings"]" Uri="/settings"/>

        <img alt="Discord" @onclick="OpenDiscordLink" src="discord-button.png" class="p-2 rounded-md bg-grey-800 shadow-md mt-4 mx-4 cursor-pointer" style="max-width: 165px"/>

        <div class="p-4">
            <small class="text-grey-500">@L["Version"]@(Version)</small>
        </div>
    </div>
</CascadingValue>

<AutosizeModal @ref="VersionNotesModal" Padding="0">
    <HeaderView>
        <span class="text-grey-300 flex-grow">@L["SoftwareUpdate"]</span>
        <span class="material-icons cursor-pointer" @onclick="() => VersionNotesModal.Close()">cancel</span>
    </HeaderView>
    <BodyView>
        <div class="h-full p-6 scrollbar-light" style="max-height: 100%; overflow-y: auto">
            <PatchNotes Version="@Version"/>
        </div>
    </BodyView>
</AutosizeModal>

@code
{
    private List<MenuItem> Items { get; set; } = new();
    private string Version { get; set; }
    private AutosizeModal VersionNotesModal { get; set; }

    protected override void OnInitialized()
    {
        var v = WpfService.GetVersion();
        Version = $"{v.Major}.{v.Minor}.{v.Build}";
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (Profile.LastVersionNotes != Version)
            {
                try
                {
    // This check is here to stop thumbnails being moved around in development
                    if (IOHelper.GetWebRoot().StartsWith(Profile.FlagrumDirectory, StringComparison.OrdinalIgnoreCase))
                    {
                        var previousAppDirectory = Directory
                            .EnumerateDirectories(Profile.FlagrumDirectory)
                            .FirstOrDefault(d => d.Contains(@"\app-") && !d.Contains($@"\app-{Version}"));

                        var previousThumbnailDirectory = $@"{previousAppDirectory}\wwwroot\EarcMods";

                        foreach (var thumbnail in Directory.EnumerateFiles(previousThumbnailDirectory))
                        {
                            try
                            {
                                File.Move(thumbnail, $@"{IOHelper.GetWebRoot()}\EarcMods\{thumbnail.Split('\\').Last()}");
                            }
                            catch
                            {
    // Ignore
                            }
                        }
                    }
                }
                catch
                {
    // Ignore
                }

                VersionNotesModal.Open();

    // Clear build cache in case any build changes have been made in the new version that need to be applied
                foreach (var file in Directory.EnumerateFiles(Profile.CacheDirectory))
                {
                    File.Delete(file);
                }

                Profile.LastVersionNotes = Version;
            }
        }
    }

    public void AddItem(MenuItem item)
    {
        Items.Add(item);
    }

    public void SetActiveItem(MenuItem item)
    {
        foreach (var i in Items)
        {
            if (i == item)
            {
                i.Activate();
            }
            else
            {
                i.Deactivate();
            }
        }

        StateHasChanged();
    }

    private void OpenDiscordLink()
    {
        const string url = "https://discord.gg/7cNNwwJKsJ";
        Process.Start(new ProcessStartInfo(url)
        {
            UseShellExecute = true
        });
    }

    public void CallStateHasChanged()
    {
        StateHasChanged();
    }
}