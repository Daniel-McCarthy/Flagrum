@using System.Diagnostics
@using System.IO
@using Flagrum.Core.Utilities
@inject IWpfService WpfService
@inject SettingsService Settings

<CascadingValue Value="this">
    <Bootstrapper/>
    <div class="h-full bg-dark flex flex-col border-dark-550 border-r" style="flex: 0 0 195px">
        <MenuItem Icon="dashboard" Text="Mod Manager" DefaultActive="true" Uri="/"/>
        <MenuItem Icon="videogame_asset" Text="Asset Explorer" Uri="/assets"/>
        <MenuItem Icon="apps" Text="Workshop Mods" Uri="/mod"/>
        @* <MenuItem Icon="share" Text="Sequence Editor" Uri="/sequenceeditor"></MenuItem> *@
        <div class="flex-grow"></div>

        <MenuItem Icon="menu_book" Text="Wiki" Uri="https://github.com/Kizari/Flagrum/wiki"/>
        <MenuItem Icon="map" Text="Roadmap" Uri="/roadmap"/>
        <MenuItem Icon="info_outline" Text="About" Uri="/about"/>
        <MenuItem Icon="settings" Text="Settings" Uri="/settings"/>
        <img @onclick="OpenDiscordLink" src="discord-button.png" class="p-2 rounded-md bg-grey-800 shadow-md mt-4 mx-4 cursor-pointer" style="max-width: 165px"/>
        <div class="p-4">
            <small class="text-grey-500">Flagrum v@(Version)</small>
        </div>
    </div>
</CascadingValue>

<Modal @ref="VersionNotesModal" Width="800" Height="600" Padding="0">
    <HeaderView>
        <span class="text-grey-300 flex-grow">Software Update</span>
        <span class="material-icons cursor-pointer" @onclick="() => VersionNotesModal.Close()">cancel</span>
    </HeaderView>
    <BodyView>
        <div class="h-full p-6 scrollbar-light" style="max-height: 100%; overflow-y: auto">
            <PatchNotes Version="@Version"/>
        </div>
    </BodyView>
</Modal>

@code
{
    private List<MenuItem> Items { get; set; } = new();
    private string Version { get; set; }
    private Modal VersionNotesModal { get; set; }

    protected override void OnInitialized()
    {
        var v = WpfService.GetVersion();
        Version = $"{v.Major}.{v.Minor}.{v.Build}";
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (Settings.LastVersionNotes != Version)
            {
                try
                {
                    var previousAppDirectory = Directory
                        .EnumerateDirectories(Settings.FlagrumDirectory)
                        .FirstOrDefault(d => d.Contains(@"\app-") && !d.Contains($@"\app-{Version}"));

                    var previousThumbnailDirectory = $@"{previousAppDirectory}\wwwroot\EarcMods";

                    foreach (var thumbnail in Directory.EnumerateFiles(previousThumbnailDirectory))
                    {
                        try
                        {
                            File.Move(thumbnail, $@"{IOHelper.GetWebRoot()}\EarcMods\{thumbnail.Split('\\').Last()}");
                        }
                        catch
                        {
    // Ignore
                        }
                    }
                }
                catch
                {
                    // Ignore
                }

                VersionNotesModal.Open();
                Settings.SetLastVersionNotes(Version);
            }
        }
    }

    public void AddItem(MenuItem item)
    {
        Items.Add(item);
    }

    public void SetActiveItem(MenuItem item)
    {
        foreach (var i in Items)
        {
            if (i == item)
            {
                i.Activate();
            }
            else
            {
                i.Deactivate();
            }
        }

        StateHasChanged();
    }

    private void OpenDiscordLink()
    {
        const string url = "https://discord.gg/7cNNwwJKsJ";
        Process.Start(new ProcessStartInfo(url)
        {
            UseShellExecute = true
        });
    }
}