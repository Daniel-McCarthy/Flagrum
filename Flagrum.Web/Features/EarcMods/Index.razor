@page "/"
@using Microsoft.EntityFrameworkCore

@inject NavigationManager Navigation
@inject FlagrumDbContext Context
@inject IWpfService WpfService
@inject ILogger<Index> Logger
@inject SettingsService Settings
@inject AppStateService AppState

@if (AppState.Node == null)
{
    <div class="flex flex-row h-full items-center">
        <div class="mx-auto text-center">
            <h4 class="text-grey-300 mb-2">
                @DisplayText
            </h4>
            <span>
                @SubText
            </span>
        </div>
    </div>
}
else
{
    <div class="flex flex-row items-center p-5 border-b border-t border-dark-600 sticky top-0 z-40 bg-dark @(IsLoading ? "none" : "")">
        <div class="flex flex-row items-center">
            <ModTypeButtonGroup Target="@Category" OnItemSelected="SetCategory">
                <ModTypeButton Text="Active Mods" Value="0"/>
                <ModTypeButton Text="Disabled Mods" Value="1"/>
            </ModTypeButtonGroup>
        </div>
        <div class="flex-grow"></div>
        <Button Icon="add" Text="Create Mod" CssClass="mr-4" OnClick="@(() => Navigation.NavigateTo("/earc/editor"))"/>
        <Button Icon="folder_zip" Text="Install from ZIP" OnClickAsync="InstallFromZip"/>
    </div>

    <CascadingValue Value="this">
        <LoadingView IsLoading="IsLoading" Text="@LoadingText" CssClass="h-full">
            @{
                using var context = new FlagrumDbContext(new SettingsService());
                var items = context.EarcMods
                    .Where(m => m.IsActive == ShowActive)
                    .AsNoTracking()
                    .ToList();

                if (items.Any())
                {
                    <div class="px-4 pb-8 flex flex-row flex-wrap">
                        @foreach (var item in items)
                        {
                            <EarcModCard Mod="item" IsDisabled="false"/>
                        }
                    </div>
                }
                else
                {
                    var type = !Context.EarcMods.Any() ? "" : ShowActive ? "active " : "disabled ";
                    <div class="p-8 flex flex-row h-full">
                        <div class="self-center mx-auto text-center">
                            <span class="text-grey-600 material-icons block mb-4" style="font-size: 120px;">inbox</span>
                            <span class="text-grey-600 text-lg font-display">
                                No @(type)EARC mods to show
                            </span>
                        </div>
                    </div>
                }
            }
        </LoadingView>

        <EarcContextMenu/>
    </CascadingValue>

    <PromptModal @ref="Prompt"/>
    <AlertModal @ref="Alert"/>

    <AutosizeModal @ref="ConflictsModal">
        <HeaderView>
            <span class="text-grey-300 flex-grow">Conflicts Detected</span>
            <span class="material-icons cursor-pointer" @onclick="CancelLegacyConflicts">cancel</span>
        </HeaderView>
        <BodyView>
            <div>
                <h4 class="text-grey-300">
                    One or more of the same EARC was detected
                </h4>
                <span class="block">Please select which you'd like to keep below:</span>
                @{
                    if (LegacyConflicts != null)
                    {
                        var i = 0;
                        var legacyConflicts = LegacyConflicts
                            .Where(c => c.Value.Count > 1)
                            .Select(kvp => (kvp.Key, kvp.Value))
                            .ToList();

                        if (legacyConflicts.Count > 0)
                        {
                            foreach (var conflict in SelectedLegacyConflicts)
                            {
                                var index = i++;
                                var (original, options) = legacyConflicts[index];
                                <h6 class="text-grey-300 mt-4 mb-2">@original</h6>
                                <EditForm Model="new object()">
                                    <InputRadioGroup @bind-Value="conflict.Value">
                                        @foreach (var option in options)
                                        {
                                            <div class="flex flex-row items-center">
                                                <InputRadio Value="@option"/>
                                                <span class="flex-grow block ml-2">@option</span>
                                            </div>
                                        }
                                    </InputRadioGroup>
                                </EditForm>
                                <Button Icon="check" Text="Confirm" CssClass="mt-6" OnClick="ConfirmLegacyConflicts"/>
                            }
                        }
                    }
                }
            </div>
        </BodyView>
    </AutosizeModal>
}