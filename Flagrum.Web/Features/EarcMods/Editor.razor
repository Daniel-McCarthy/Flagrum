@page "/earc/editor"
@page "/earc/editor/{ModId}"
@using Microsoft.EntityFrameworkCore
@using Flagrum.Web.Persistence.Entities
@using Flagrum.Web.Persistence.Entities.ModManager
@using Flagrum.Web.Features.EarcMods.Modals
@using Flagrum.Core.Archive
@using System.IO
@using System.Diagnostics
@inherits ModComponentBase

@inject NavigationManager Navigation
@inject IWpfService WpfService
@inject ILogger<Editor> Logger
@inject IStringLocalizer<Editor> Localizer
@inject SettingsService Settings

<LoadingView IsLoading="IsLoading" Text="@LoadingText" CssClass="h-full">
<div class="p-6 flex flex-row h-full">
<div class="flex-grow h-full flex flex-col">
<div class="box p-6 mb-6 flex flex-row items-center">
    <h4 class="text-grey-200 flex-grow">@Mod.Name</h4>
    <Button Icon="save" Text="@Localizer["Save"]" CssClass="mr-3" OnClickAsync="Save"/>
    @if (ModId != null && Mod.HasAnyCachedFiles)
    {
        <Button Icon="folder_off" Text="@Localizer["ClearCache"]" OnClick="ClearCache" CssClass="mr-3"/>
    }
    <Button Icon="delete_forever" Text="@Localizer["Delete"]" OnClick="Delete" CssClass="bg-error hover:bg-error mr-3"/>
    <Button Icon="cancel" Text="@Localizer["Cancel"]" OnClick="@(() => Navigation.NavigateTo("/"))"/>
</div>
<div class="box flex flex-row items-center p-6 border-b border-black">
    <h5 class="text-grey-200 flex-grow">@Localizer["BuildList"]</h5>
    <Button Icon="folder" Text="@Localizer["ReplaceAsset"]" CssClass="mr-3" OnClick="OpenReplaceModal"/>
    <Button Icon="block" Text="@Localizer["RemoveAsset"]" CssClass="mr-3" OnClick="OpenRemoveModal"/>
</div>
<div class="box flex flex-row items-center px-6 py-3 border-b border-black">
    @{
        var total = Mod.Earcs.Sum(e => e.Files.Count) + Mod.LooseFiles.Count;
        var archives = Mod.Earcs.Count;
        var newArchives = Mod.Earcs.Count(e => e.Type == EarcChangeType.Create);
        var modifiedArchives = Mod.Earcs.Count(e => e.Type == EarcChangeType.Change);
        var newFiles = Mod.Earcs.Sum(e => e.Files.Count(f => f.Type == EarcFileChangeType.Add));
        var modifiedFiles = Mod.Earcs.Sum(e => e.Files.Count(f => f.Type == EarcFileChangeType.Replace));
        var removedFiles = Mod.Earcs.Sum(e => e.Files.Count(f => f.Type == EarcFileChangeType.Remove));
        var newReferences = Mod.Earcs.Sum(e => e.Files.Count(f => f.Type == EarcFileChangeType.AddReference));
    }

    <span class="mr-10">Total Instructions: <strong>@total</strong></span>
    <span class="mr-10">Total Archives: <strong>@archives</strong></span>

    @if (newArchives > 0)
    {
        <span class="mr-10">New Archives: <strong>@newArchives</strong></span>
    }

    @if (modifiedArchives > 0)
    {
        <span class="mr-10">Modified Archives: <strong>@modifiedArchives</strong></span>
    }

    @if (newFiles > 0)
    {
        <span class="mr-10">New Files: <strong>@newFiles</strong></span>
    }

    @if (modifiedFiles > 0)
    {
        <span class="mr-10">Modified Files: <strong>@modifiedFiles</strong></span>
    }

    @if (removedFiles > 0)
    {
        <span class="mr-10">Removed Files: <strong>@removedFiles</strong></span>
    }

    @if (newReferences > 0)
    {
        <span>New References: <strong>@newReferences</strong></span>
    }
</div>
<div class="flex-grow box overflow-auto">
    @if (Mod.Earcs.Any())
    {
        foreach (var earc in Mod.Earcs)
        {
            <div class="row border-b border-black px-4 py-3">
                <span class="material-icons mr-3 cursor-pointer select-none"
                      @onclick="() => { earc.IsExpanded = !earc.IsExpanded; StateHasChanged(); }">
                    @(earc.IsExpanded ? "expand_more" : "chevron_right")
                </span>
                <h5 class="text-grey-300">@earc.EarcRelativePath</h5>
                <span class="material-icons pl-1.5 pt-0.5 cursor-pointer text-accent1-200 text-sm pb-0.5" @onclick="() => LaunchRelativePath(earc.EarcRelativePath)">
                    open_in_new
                </span>
            </div>

            if (earc.IsExpanded)
            {
                if (earc.Files.Count < 1)
                {
                    <div class="px-12 py-4 border-b border-black">
                        @Localizer["NoFileChangesSet"]
                    </div>
                }

                foreach (var replacement in earc.Files)
                {
                    <div class="flex flex-row px-4 py-2 border-b border-black">
                        <div class="text-right mx-4" style="flex: 0 0 120px;">
                            @switch (replacement.Type)
                            {
                                case EarcFileChangeType.Replace:
                                    <strong>@Localizer["Replace"]:</strong>
                                    <br/>
                                    <strong>@Localizer["With"]:</strong>
                                    break;
                                case EarcFileChangeType.Remove:
                                    <strong>@Localizer["Remove"]:</strong>
                                    break;
                                case EarcFileChangeType.AddReference:
                                    <strong>@Localizer["AddReference"]:</strong>
                                    break;
                                case EarcFileChangeType.Add:
                                    <strong>@Localizer["AddFile"]:</strong>
                                    <br/>
                                    <strong>@Localizer["From"]:</strong>
                                    break;
                                case EarcFileChangeType.AddToTextureArray:
                                    <strong>Add To:</strong>
                                    <br/>
                                    <strong>@Localizer["From"]:</strong>
                                    break;
                            }
                        </div>
                        <div style="flex: 1 1 auto;">
                            @switch (replacement.Type)
                            {
                                case EarcFileChangeType.Replace:
                                case EarcFileChangeType.Add:
                                case EarcFileChangeType.AddToTextureArray:
                                    <div class="truncate-middle" style="max-width: calc(100vw - 820px)">
                                        <div>@string.Join('/', replacement.Uri.Split('/')[..^1])</div>
                                        <div>/@replacement.Uri.Split('/').Last()</div>
                                    </div>
                                    <br/>
                                    <div class="truncate-middle" style="max-width: calc(100vw - 820px)">
                                        <div>@string.Join('\\', replacement.ReplacementFilePath.Split('\\')[..^1])</div>
                                        <div>\@replacement.ReplacementFilePath.Split('\\').Last()</div>
                                        <span class="material-icons pl-1.5 pt-0.5 cursor-pointer text-accent1-200 text-sm pb-0.5" @onclick="() => LaunchAbsolutePath(replacement.ReplacementFilePath)">
                                            open_in_new
                                        </span>
                                    </div>
                                    break;
                                case EarcFileChangeType.Remove:
                                case EarcFileChangeType.AddReference:
                                    <div class="truncate-middle" style="max-width: calc(100vw - 820px)">
                                        <div>@string.Join('/', replacement.Uri.Split('/')[..^1])</div>
                                        <div>/@replacement.Uri.Split('/').Last()</div>
                                    </div>
                                    break;
                            }
                        </div>
                        <div class="ml-8">
                            <span class="material-icons text-accent1-200 cursor-pointer" @onclick="() => RemoveReplacement(earc, replacement)">delete</span>
                        </div>
                    </div>
                }
            }
        }
    }

    @if (Mod.LooseFiles.Any())
    {
        <div class="row border-b border-black px-4 py-3">
            <span class="material-icons mr-3 cursor-pointer select-none"
                  @onclick="() => { IsLooseFilesExpanded = !IsLooseFilesExpanded; StateHasChanged(); }">
                @(IsLooseFilesExpanded ? "expand_more" : "chevron_right")
            </span>
            <h5 class="text-grey-300 flex-grow">Loose Files</h5>
        </div>

        if (IsLooseFilesExpanded)
        {
            foreach (var file in Mod.LooseFiles)
            {
                <div class="flex flex-row px-4 py-2 border-b border-black">
                    <div class="text-right mx-4" style="flex: 0 0 120px;">
                        @switch (file.Type)
                        {
                            case EarcChangeType.Create:
                                <strong>@Localizer["AddFile"]:</strong>
                                <br/>
                                <strong>@Localizer["From"]:</strong>
                                break;
                            case EarcChangeType.Change:
                                <strong>@Localizer["Replace"]:</strong>
                                <br/>
                                <strong>@Localizer["With"]:</strong>
                                break;
                        }
                    </div>
                    <div style="flex: 1 1 auto;">
                        @switch (file.Type)
                        {
                            case EarcChangeType.Create:
                            case EarcChangeType.Change:
                                <div class="truncate-middle" style="max-width: calc(100vw - 820px)">
                                    <div>@string.Join('\\', file.RelativePath.Split('\\')[..^1])</div>
                                    <div>\@file.RelativePath.Split('\\').Last()</div>
                                </div>
                                <br/>
                                <div class="truncate-middle" style="max-width: calc(100vw - 820px)">
                                    <div>@string.Join('\\', file.FilePath.Split('\\')[..^1])</div>
                                    <div>\@file.FilePath.Split('\\').Last()</div>
                                    <span class="material-icons pl-1.5 pt-0.5 cursor-pointer text-accent1-200 text-sm pb-0.5" @onclick="() => LaunchAbsolutePath(file.FilePath)">
                                        open_in_new
                                    </span>
                                </div>
                                break;
                        }
                    </div>
                    <div class="ml-8">
                        <span class="material-icons text-accent1-200 cursor-pointer" @onclick="() => RemoveLooseFile(file)">delete</span>
                    </div>
                </div>
            }
        }
    }

    @if (!Mod.Earcs.Any() && !Mod.LooseFiles.Any())
    {
        <div class="rounded-md bg-accent1-900 border border-accent1-500 text-accent1-300 p-4 mt-4 mx-4">
            @Localizer["NoFileChangesSet"]
        </div>
    }
</div>
</div>

</div>
</LoadingView>

<CascadingValue Value="this">
    <UriSelectModal @ref="Modal" OnFileSelected="OnFileSelected"/>
</CascadingValue>

<AlertModal @ref="Alert"/>
<PromptModal @ref="Prompt"/>

@code
{
    [Parameter]
    public string ModId { get; set; }

    private bool IsLoading { get; set; }
    private string LoadingText { get; set; }
    private UriSelectModal Modal { get; set; }
    private AlertModal Alert { get; set; }
    private EarcFileChangeType ModalType { get; set; }
    private EarcModEarc ContextEarc { get; set; }
    private ArchiveFileFlag ContextFlags { get; set; }
    private bool IsLooseFilesExpanded { get; set; }
    private bool HasChanged { get; set; }

    protected override void OnInitialized()
    {
        var modId = Convert.ToInt32(ModId);
        Mod = Context.EarcMods
            .Include(e => e.Earcs)
            .ThenInclude(e => e.Files)
            .Include(m => m.LooseFiles)
            .Where(m => m.Id == modId)
            .AsNoTracking()
            .ToList()
            .FirstOrDefault()!;

        StateHasChanged();
    }

    private void OpenReplaceModal()
    {
        ModalType = EarcFileChangeType.Replace;
        Modal.Open();
    }

    private void OpenRemoveModal()
    {
        ModalType = EarcFileChangeType.Remove;
        Modal.Open();
    }

    private async Task OnFileSelected(string uri)
    {
        if (Mod.Earcs.Any(e => e.Files.Any(r => r.Uri.Equals(uri, StringComparison.OrdinalIgnoreCase))))
        {
            Alert.Open("Warning", "Invalid Action", "You cannot alter the same file twice.", null);
            return;
        }

        const string filter = "All Files|*.*";

        switch (ModalType)
        {
            case EarcFileChangeType.Replace:
            {
                await WpfService.OpenFileDialogAsync(filter, async file =>
                {
                    Mod.AddReplacement(Context.GetArchiveRelativeLocationByUri(uri), uri, file);
                    await InvokeAsync(StateHasChanged);
                });
                break;
            }
            case EarcFileChangeType.Remove:
                Mod.AddRemoval(Context.GetArchiveRelativeLocationByUri(uri), uri);
                await InvokeAsync(StateHasChanged);
                break;
        }

        HasChanged = true;
    }

    private void RemoveReplacement(EarcModEarc earc, EarcModFile file)
    {
        earc.Files.Remove(file);

        if (earc.Files.Count == 0)
        {
            Mod.Earcs.Remove(earc);
        }

        HasChanged = true;
        StateHasChanged();
    }

    private void RemoveLooseFile(EarcModLooseFile file)
    {
        Mod.LooseFiles.Remove(file);
        HasChanged = true;
        StateHasChanged();
    }

    private async Task Save()
    {
        LoadingText = "Saving Mod";
        IsLoading = true;
        StateHasChanged();

        if (HasChanged || Mod.HaveFilesChanged)
        {
            var deadFiles = Mod.Earcs.SelectMany(e => e.Files
                .Where(r => r.Type is EarcFileChangeType.Replace or EarcFileChangeType.Add or EarcFileChangeType.AddToTextureArray
                            && !File.Exists(r.ReplacementFilePath)))
                .Select(r => r.ReplacementFilePath)
                .ToList();

            if (deadFiles.Any())
            {
                var message = deadFiles.Aggregate("The mod could not be built as the following files were missing:<ul class='mt-4'>",
                    (current, file) => current + $"<li>{file}</li>");
                Alert.Open("Error", "Missing Files", message + "</ul>", null, 400, 300, true);
                IsLoading = false;
                StateHasChanged();
            }
            else
            {
                await Task.Run(async () => await CheckConflicts(Mod,
                    async () =>
                    {
                        await Mod.Save(Context, Logger, HasChanged);
                        Navigation.NavigateTo("/");
                    },
                    async () =>
                    {
                        await Mod.SaveNoBuild(Context, HasChanged);
                        Navigation.NavigateTo("/");
                    }));
            }
        }
        else
        {
            if (Mod.IsActive)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                await Task.Run(async () => await CheckConflicts(Mod,
                    async () =>
                    {
                        await Mod.Enable(Context, Logger);
                        Navigation.NavigateTo("/");
                    },
                    () =>
                    {
                        Navigation.NavigateTo("/");
                        return Task.CompletedTask;
                    }));
            }
        }
    }

    private void Delete()
    {
        Prompt.Title = "Delete Mod";
        Prompt.Heading = "Are you sure?";
        Prompt.Subtext = "This action cannot be undone!";
        Prompt.YesText = "Delete";
        Prompt.NoText = "Cancel";
        Prompt.OnNo = null;
        Prompt.OnYes = async () => await InvokeAsync(async () =>
        {
            LoadingText = "Deleting Mod";
            IsLoading = true;
            StateHasChanged();

            await Task.Run(async () => await Mod.Delete(Context));
            Navigation.NavigateTo("/");
        });

        Prompt.Open();
    }

    private void ClearCache()
    {
        Mod.ClearCachedFiles();
        Alert.Open("Success", "Cache Cleared", "The cached build files for this mod have been cleared.", null, 300, 200);
        StateHasChanged();
    }

    private void LaunchRelativePath(string relativePath)
    {
        var uri = $@"{Settings.GameDataDirectory}\{relativePath[..relativePath.LastIndexOf('\\')]}";
        Process.Start(new ProcessStartInfo(uri) {UseShellExecute = true});
    }

    private void LaunchAbsolutePath(string path)
    {
        Process.Start(new ProcessStartInfo(path) {UseShellExecute = true});
    }
}