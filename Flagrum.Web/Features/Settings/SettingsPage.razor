@page "/settings"
@using Flagrum.Web.Persistence.Entities

@inject SettingsService Settings
@inject IWpfService WpfService
@inject IStringLocalizer<SettingsPage> Localizer
@inject FlagrumDbContext Context
@inject IJSRuntime JSRuntime

<div class="p-6">

    @if (Warn)
    {
        <div class="bg-error mb-6 p-4">
            <span class="text-white">
                @Localizer["PathAutodetectFailed"]
            </span>
        </div>
    }

    <EditForm Model="Data">

        <div class="box p-4 mb-6 row">
            <span class="mr-3" style="flex: 0 0 200px">@Localizer["Language"]</span>
            <select class="input bg-dark-550 flex-grow" style="max-width: 500px;" @bind="CurrentCulture">
                <option value="en-GB">@GetLanguageString("English")</option>
                <option value="ja-JP">@GetLanguageString("Japanese")</option>
                <option value="zh-Hans">@GetLanguageString("Chinese (Simplified)")</option>
                <option value="zh-Hant">@GetLanguageString("Chinese (Traditional)")</option>
            </select>
        </div>

        <div class="box p-4 mb-6">
            <div class="row mb-3">
                <span class="mr-3" style="flex: 0 0 200px;">@Localizer["GamePath"]</span>
                <Textbox Size="Textbox.Variant.Stretch" @bind-Value="Data.GamePath" IsReadOnly="true"/>
                <Button Icon="folder" Text="@Localizer["Browse"]" CssClass="ml-4" OnClickAsync="GamePathClicked"/>
            </div>
            <small class="text-grey-600">@Localizer["DefaultGamePath"]</small>
        </div>

        <div class="box p-4 mb-6">
            <div class="row mb-3">
                <span class="mr-3" style="flex: 0 0 200px;">@Localizer["BinmodPath"]</span>
                <Textbox Size="Textbox.Variant.Stretch" @bind-Value="Data.BinmodListPath" IsReadOnly="true"/>
                <Button Icon="folder" Text="@Localizer["Browse"]" CssClass="ml-4" OnClickAsync="BinmodListPathClicked"/>
            </div>
            <small class="text-grey-600">@Localizer["DefaultBinmodPath"]</small>
        </div>
        
        @if (!Warn)
        {
            <div class="box p-6 mb-6">
                <div class="row mb-6">
                    <h4 class="text-grey-300 flex-grow">Asset Explorer Settings</h4>
                    <Button Icon="cached" Text="Regenerate File Index" OnClick="() => RegenerateModal?.Open()" />
                </div>
                <div class="row">
                    <Checkbox IsChecked="AddressBarToggle" OnChange="t => ToggleAddressBar(t)" />
                    <span class="ml-3">Select all text when address bar is clicked</span>
                </div>
            </div>
            
            <RegenerateModal @ref="RegenerateModal"/>
        }

    </EditForm>

</div>

<PromptModal @ref="RestartPrompt"
             Title=@Localizer["RestartRequired"]
             Heading=@Localizer["RestartRequired"]
             Subtext=@Localizer["RestartPrompt"]
             OnYes="RestartApplication"/>

@code
{
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    [Parameter]
    public bool Warn { get; set; }

    private string _currentCulture;
    
    private SettingsData Data { get; } = new();
    private PromptModal RestartPrompt { get; set; }
    private LanguageTable LanguageTable { get; set; } = new();
    private RegenerateModal RegenerateModal { get; set; }
    private bool AddressBarToggle { get; set; }

    private string CurrentCulture
    {
        get => _currentCulture;
        set
        {
            if (_currentCulture != value)
            {
                _currentCulture = value;
                OnLanguageChanged(_currentCulture);
            }
        }
    }

    protected override void OnInitialized()
    {
        Data.GamePath = Settings.GamePath;
        Data.WorkshopPath = Settings.WorkshopPath;
        Data.BinmodListPath = Settings.BinmodListPath;
        AddressBarToggle = Context.GetBool(StateKey.AssetExplorerAddressBarSelect);

        var supportedExtraCultures = new List<CultureInfo>
        {
            new("ja-JP"),
            new("zh-Hans"),
            new("zh-Hant")
        };

        foreach (var culture in supportedExtraCultures)
        {
            var closestCulture = GetClosestCulture(culture);
            if (closestCulture != null)
            {
                _currentCulture = closestCulture;
                break;
            }
        }

        _currentCulture ??= "en-GB";
    }

    private void ToggleAddressBar(bool newState)
    {
        AddressBarToggle = newState;
        Context.SetBool(StateKey.AssetExplorerAddressBarSelect, newState);
    }

    private string GetClosestCulture(CultureInfo culture)
    {
        var cultureToMatch = CultureInfo.CurrentCulture;

        do
        {
            if (cultureToMatch.Name == culture.Name)
            {
                return culture.Name;
            }

            cultureToMatch = cultureToMatch.Parent;
        } while (cultureToMatch.Parent.Name != cultureToMatch.Name);

        return null;
    }

    private string GetLanguageString(string language)
    {
        var currentCultureString = Localizer[language];
        var nativeCultureString = LanguageTable[language];

        return currentCultureString == nativeCultureString 
            ? nativeCultureString 
            : $"{currentCultureString} ({nativeCultureString})";
    }

    private void OnLanguageChanged(string language)
    {
        Context.SetString(StateKey.Language, language ?? "en-GB");
        RestartPrompt.Open();
    }

    private void RestartApplication()
    {
        WpfService.Restart();
    }

    private async Task GamePathClicked()
    {
        await WpfService.OpenFileDialogAsync(
            "Application (*.exe)|*.exe",
            path =>
            {
                Data.GamePath = path;
                Settings.SetGamePath(path);
                InvokeAsync(StateHasChanged);
                InvokeAsync(Layout.CallStateHasChanged);
            });
    }

    private async Task BinmodListPathClicked()
    {
        await WpfService.OpenFileDialogAsync(
            "Binmod List (*.list)|*.list",
            path =>
            {
                Data.BinmodListPath = path;
                Settings.SetBinmodListPath(path);
                InvokeAsync(StateHasChanged);
                InvokeAsync(Layout.CallStateHasChanged);
            });
    }
}