@using System.Timers
@using Flagrum.Web.Persistence.Entities
@inject AppStateService AppState
@inject FlagrumDbContext Context

<Modal @ref="Modal" Padding="0" Width="800" Height="600">
    <HeaderView>
        <span class="text-grey-300 flex-grow">Browse Game Models</span>
        <span class="material-icons cursor-pointer" @onclick="() => Modal.Close()">cancel</span>
    </HeaderView>
    <BodyView>

        @if (AppState.RootModelBrowserNode != null)
        {
            <div class="w-full h-full flex flex-col">
                <div class="row px-2 py-2 border-b border-t border-dark-600 sticky top-0 z-40 bg-grey-900">
                    <span class="material-icons cursor-pointer block mr-3 ml-1 select-none" @onclick="NavigateUp">arrow_upward</span>
                    <div class="flex-grow">
                        <EditForm Model="new object()">
                            <Textbox IsReadOnly="true" @bind-Value="CurrentUri" Size="Textbox.Variant.Stretch"/>
                        </EditForm>
                    </div>
                </div>

                <div class="flex flex-row">
                    <div class="bg-grey-900 border-t border-b border-r border-dark-550 p-3" style="flex: 0 0 315px;">
                        <div class="row">
                            <strong class="font-display flex-grow">@CurrentNode.Name</strong>
                        </div>
                    </div>
                    <div class="flex-grow bg-grey-900 border-t border-b border-dark-550 row py-2 px-3">
                        <strong class="flex-grow font-display">No File Selected</strong>
                    </div>
                </div>

                <div class="flex flex-row" style="flex: 1 1 auto; align-items: stretch; overflow: hidden">
                    <div class="border-r border-dark-550 overflow-auto py-2" style="flex: 0 0 315px; height: 100%;">
                        <CascadingValue Value="this">
                            @foreach (var node in CurrentNode.Children
                                .OrderByDescending(n => n.Children.Any())
                                .ThenBy(n => n.Name))
                            {
                                <ModelExplorerRow Node="node"/>
                            }
                        </CascadingValue>
                    </div>
                    <div class="flex flex-col bg-dark-600 overflow-y-auto" style="flex: 1 1 auto; height: 100%">
                        <Preview Item="SelectedItem"/>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center">
                <span class="m-6">The asset browser cannot be used until file indexing is complete. Please wait or try again shortly.</span>
            </div>
        }

    </BodyView>
</Modal>

@code
{
    [CascadingParameter]
    public ModelReplacement Parent { get; set; }

    private Timer _timer;
    private AssetExplorerNode _currentNode;
    private ModelReplacementPath _path;

    private Modal Modal { get; set; }

    private string CurrentUri { get; set; }

    private AssetExplorerNode CurrentNode
    {
        get => _currentNode;
        set
        {
            _currentNode = value;
            CurrentUri = _currentNode.GetUri(Context);
        }
    }

    protected override void OnInitialized()
    {
        if (AppState.RootModelBrowserNode == null)
        {
            _timer = new Timer(1000);
            _timer.Elapsed += (_, _) =>
            {
                if (AppState.RootModelBrowserNode != null)
                {
                    _timer.Stop();
                    InvokeAsync(() =>
                    {
                        CurrentNode = AppState.RootModelBrowserNode;
                        StateHasChanged();
                    });
                }
            };

            _timer.Start();
        }
        else
        {
            CurrentNode = AppState.RootModelBrowserNode;
        }
    }

    public void SetNode(AssetExplorerNode node)
    {
        if (node.Name.EndsWith(".gmdl"))
        {
            _path.Path = node.GetUri(Context).Replace("data://", "");
            Close();
            Parent.CallStateHasChanged();
            return;
        }

        CurrentNode = node;
        StateHasChanged();
    }

    private void NavigateUp()
    {
        if (CurrentNode.Parent != null)
        {
            CurrentNode = CurrentNode.Parent;
        }
    }

    public void Open(ModelReplacementPath path)
    {
        _path = path;
        Modal.Open();
    }

    public void Close()
    {
        Modal.Close();
    }
}