@using Index = Flagrum.Web.Features.ModLibrary.Editor.Index
@using Flagrum.Web.Features.ModLibrary.Data
@using Flagrum.Core.Archive
@inject IStringLocalizer<Index> Localizer

<div class="box mt-6">
    <EditForm Model="Stats">
        <div class="p-4">
            <table class="w-full right-align-all-labels">
                <tr>
                    <td>
                        <label>@Localizer["ModTitle"]</label>
                    </td>
                    <td colspan="7" class="pl-4">
                        <Textbox Size="Textbox.Variant.Stretch" @bind-Value="Parent.Mod.WorkshopTitle"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>@Localizer["ModDescription"]</label>
                    </td>
                    <td colspan="7" class="pl-4">
                        <Textbox Rows="5" Size="Textbox.Variant.Stretch" @bind-Value="Parent.Mod.Description"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>@Localizer["GearMenuTitle"]</label>
                    </td>
                    <td colspan="7" class="pl-4">
                        <Textbox Size="Textbox.Variant.Stretch" @bind-Value="Parent.Mod.GameMenuTitle"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>@Localizer["GearMenuDescription"]</label>
                    </td>
                    <td colspan="7" class="pl-4">
                        <Textbox Rows="3" Size="Textbox.Variant.Stretch" @bind-Value="Parent.Mod.GameMenuDescription"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>@Localizer["MaxHP"]</label>
                    </td>
                    <td>
                        <NumberBox @bind-Value="Stats[Stat.MaxHp].Value"/>
                    </td>
                    @if (Parent.Mod.Target == (int)OutfitSoloTarget.Noctis)
                    {
                        <td>
                            <label>@Localizer["MaxMP"]</label>
                        </td>
                        <td>
                            <NumberBox @bind-Value="Stats[Stat.MaxMp].Value"/>
                        </td>
                    }
                    else
                    {
                        <td></td>
                        <td></td>
                    }
                    <td>
                        <label>@Localizer["FireRes"]</label>
                    </td>
                    <td>
                        <NumberBox Max="100" @bind-Value="Stats[Stat.Fire].Value"/>
                    </td>
                    <td>
                        <label>@Localizer["IceRes"]</label>
                    </td>
                    <td>
                        <NumberBox Max="100" @bind-Value="Stats[Stat.Ice].Value"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>@Localizer["Strength"]</label>
                    </td>
                    <td>
                        <NumberBox @bind-Value="Stats[Stat.Strength].Value"/>
                    </td>
                    <td>
                        <label>@Localizer["Vitality"]</label>
                    </td>
                    <td>
                        <NumberBox @bind-Value="Stats[Stat.Vitality].Value"/>
                    </td>
                    <td>
                        <label>@Localizer["ThunderRes"]</label>
                    </td>
                    <td>
                        <NumberBox Max="100" @bind-Value="Stats[Stat.Thunder].Value"/>
                    </td>
                    <td>
                        <label>@Localizer["DarkRes"]</label>
                    </td>
                    <td>
                        <NumberBox Max="100" @bind-Value="Stats[Stat.Dark].Value"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>@Localizer["Magic"]</label>
                    </td>
                    <td>
                        <NumberBox @bind-Value="Stats[Stat.Magic].Value"/>
                    </td>
                    <td>
                        <label>@Localizer["Spirit"]</label>
                    </td>
                    <td>
                        <NumberBox @bind-Value="Stats[Stat.Spirit].Value"/>
                    </td>
                    <td>
                        <label>@Localizer["BallisticRes"]</label>
                    </td>
                    <td>
                        <NumberBox Max="100" @bind-Value="Stats[Stat.Ballistic].Value"/>
                    </td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <td class="pt-4">
                        <label class="@(Parent.StatsTotal <= 100 ? "" : "text-error")">@Parent.StatsTotal/100</label>
                    </td>
                    <td colspan="7" class="pl-4 pt-4">
                        <div class="bg-black">
                            <div class="@(Parent.StatsTotal <= 100 ? "bg-accent1-200" : "bg-error")" style="width: @(Parent.StatsTotal <= 0 ? "0" : Parent.StatsTotal > 100 ? "100" : Parent.StatsTotal.ToString())%">&nbsp;</div>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </EditForm>
</div>

@code
{
    [CascadingParameter]
    public Index Parent { get; set; }

    private Dictionary<Stat, StatsModel> Stats { get; set; }

    protected override void OnInitialized()
    {
        Stats = new Dictionary<Stat, StatsModel>
        {
            {
                Stat.MaxHp, StatsModel.Create(Parent.Mod.Type, Parent.Mod.Target, Stat.MaxHp, () => Parent.Mod.MaxHp, v =>
                {
                    Parent.Mod.MaxHp = v;
                    UpdateStatCount();
                })
            },
            {
                Stat.MaxMp, StatsModel.Create(Parent.Mod.Type, Parent.Mod.Target, Stat.MaxMp, () => Parent.Mod.MaxMp, v =>
                {
                    Parent.Mod.MaxMp = v;
                    UpdateStatCount();
                })
            },
            {
                Stat.Strength, StatsModel.Create(Parent.Mod.Type, Parent.Mod.Target, Stat.Strength, () => Parent.Mod.Strength, v =>
                {
                    Parent.Mod.Strength = v;
                    UpdateStatCount();
                })
            },
            {
                Stat.Vitality, StatsModel.Create(Parent.Mod.Type, Parent.Mod.Target, Stat.Vitality, () => Parent.Mod.Vitality, v =>
                {
                    Parent.Mod.Vitality = v;
                    UpdateStatCount();
                })
            },
            {
                Stat.Magic, StatsModel.Create(Parent.Mod.Type, Parent.Mod.Target, Stat.Magic, () => Parent.Mod.Magic, v =>
                {
                    Parent.Mod.Magic = v;
                    UpdateStatCount();
                })
            },
            {
                Stat.Spirit, StatsModel.Create(Parent.Mod.Type, Parent.Mod.Target, Stat.Spirit, () => Parent.Mod.Spirit, v =>
                {
                    Parent.Mod.Spirit = v;
                    UpdateStatCount();
                })
            },
            {
                Stat.Fire, StatsModel.Create(Parent.Mod.Type, Parent.Mod.Target, Stat.Fire, () => Parent.Mod.Fire, v =>
                {
                    Parent.Mod.Fire = v;
                    UpdateStatCount();
                })
            },
            {
                Stat.Ice, StatsModel.Create(Parent.Mod.Type, Parent.Mod.Target, Stat.Ice, () => Parent.Mod.Ice, v =>
                {
                    Parent.Mod.Ice = v;
                    UpdateStatCount();
                })
            },
            {
                Stat.Thunder, StatsModel.Create(Parent.Mod.Type, Parent.Mod.Target, Stat.Thunder, () => Parent.Mod.Thunder, v =>
                {
                    Parent.Mod.Thunder = v;
                    UpdateStatCount();
                })
            },
            {
                Stat.Dark, StatsModel.Create(Parent.Mod.Type, Parent.Mod.Target, Stat.Dark, () => Parent.Mod.Dark, v =>
                {
                    Parent.Mod.Dark = v;
                    UpdateStatCount();
                })
            },
            {
                Stat.Ballistic, StatsModel.Create(Parent.Mod.Type, Parent.Mod.Target, Stat.Ballistic, () => Parent.Mod.Ballistic, v =>
                {
                    Parent.Mod.Ballistic = v;
                    UpdateStatCount();
                })
            }
        };

        if (Parent.Mod.Type is (int)BinmodType.Weapon or (int)BinmodType.Multi_Weapon)
        {
            Stats.Add(Stat.Attack, StatsModel.Create(Parent.Mod.Type, Parent.Mod.Target, Stat.Attack, () => Parent.Mod.Attack, v =>
            {
                Parent.Mod.Attack = v;
                UpdateStatCount();
            }));
            Stats.Add(Stat.Critical, StatsModel.Create(Parent.Mod.Type, Parent.Mod.Target, Stat.Critical, () => Parent.Mod.Critical, v =>
            {
                Parent.Mod.Critical = v;
                UpdateStatCount();
            }));
        }

        UpdateStatCount();
    }

    private void UpdateStatCount()
    {
        if (Stats != null)
        {
            Parent.StatsTotal = Stats.Sum(s => s.Value.Cost);
            StateHasChanged();
        }
    }
}