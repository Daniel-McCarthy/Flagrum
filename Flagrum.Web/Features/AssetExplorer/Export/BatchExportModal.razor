@using Index = Flagrum.Web.Features.AssetExplorer.Index
@using System.IO

@inject IWpfService WpfService
@inject IStringLocalizer<BatchExportModal> L

<AutosizeModal @ref="Modal">
    <HeaderView>
        <span class="text-grey-300 flex-grow">@L["BatchExport"]</span>
        <span class="material-icons cursor-pointer" @onclick="() => Modal.Close()">cancel</span>
    </HeaderView>
    <BodyView>
        <div class="h-full">
            <span>@L["FormatSupport"]</span>
            <div class="row mt-6">
                <label style="width: 150px">@L["OutputFormat"]</label>
                <select @bind="Extension" class="input bg-dark-550 w-full">
                    <option>PNG</option>
                    <option>TGA</option>
                    <option>DDS</option>
                </select>
            </div>
            <div class="row mt-6 mb-10">
                <Checkbox IsChecked="@IsRecursive" OnChange="v => { IsRecursive = v; StateHasChanged(); }"/>
                <span class="inline-block ml-2">@L["Recursion"]</span>
            </div>
            <Button Text="@L["ExportBatch"]" Icon="file_download" OnClickAsync="ExportBatch"/>
        </div>
    </BodyView>
</AutosizeModal>

@code
{
    [CascadingParameter]
    public Index Parent { get; set; }

    private AutosizeModal Modal { get; set; }
    private bool IsRecursive { get; set; }
    private string Extension { get; set; } = "PNG";

    public void Open()
    {
        Modal.Open();
    }

    private async Task ExportBatch()
    {
        await WpfService.OpenFolderDialogAsync(Parent.SelectedDirectory.Item.Path, folder =>
        {
            InvokeAsync(() =>
            {
                Modal.Close();
                Parent.IsLoading = true;
                StateHasChanged();

                var files = new List<string>();

                if (IsRecursive)
                {
                    BuildFileListRecursively(Parent.SelectedDirectory.Item.Path, files);
                }
                else
                {
                    files.AddRange(Directory.GetFiles(Parent.SelectedDirectory.Item.Path, "*.btex"));
                }

                var directories = files
                    .Select(f =>
                    {
                        var relativePath = f.Replace(Parent.SelectedDirectory.Item.Path, "")[1..];
                        var index = relativePath.LastIndexOf('\\');
                        return index > 0 ? relativePath.Remove(index) : null;
                    })
                    .Where(d => !string.IsNullOrWhiteSpace(d))
                    .Distinct();

                foreach (var directory in directories)
                {
                    Directory.CreateDirectory($"{folder}\\{directory}");
                }

                foreach (var file in files)
                {
                    var relativePath = file.Replace(Parent.SelectedDirectory.Item.Path, "");
                    var outputPath = $"{folder}{relativePath.Replace(".btex", $".{Extension.ToLower()}")}";
                    var btex = File.ReadAllBytes(file);
                    var converter = new TextureConverter();
                    var data = Extension switch
                    {
                        "PNG" => converter.BtexToPng(btex),
                        "TGA" => converter.BtexToTga(btex),
                        _ => converter.BtexToDds(btex)
                        };

                    File.WriteAllBytes(outputPath, data);
                }

                Parent.IsLoading = false;
                StateHasChanged();
            });
        });
    }

    private void BuildFileListRecursively(string directory, List<string> files)
    {
        files.AddRange(Directory.GetFiles(directory, "*.btex"));
        foreach (var subdirectory in Directory.EnumerateDirectories(directory))
        {
            BuildFileListRecursively(subdirectory, files);
        }
    }
}